<chapter id="workingwithdata">
<title>Working With Data</title>

<sect1 id="datasources">
<title>Data Sources</title>

<sect2 id="fileformats">
<title>Supported File Formats</title>
<para>
Currently, Kst supports ASCII text files,
<ulink url="http://getdata.sourceforge.net/">dirfiles</ulink>, and
<ulink url="http://www.unidata.ucar.edu/software/netcdf/">NetCDF</ulink>,
for vectors and scalars, and FITS images, BIT image streams,
16 bit TIFF images, and any image format supported by 
<ulink url="http://doc.qt.io/qt-5/qimage.html">QImage</ulink>,
 (jpg, png, bmp, etc) for images.
</para>
</sect2>

<sect2 id="DataSourceConcepts">
<title>Data Source Concepts</title>
<para>
A data source in &kst; is simply a supported data file.
The following concepts are important in understanding how &kst; works with
different data sources.
Some terminology is also introduced in this section.
</para>

<sect3 id="DefineFields">
<title>Fields</title>
<para>
  Data in &kst; are accessed by field names.  A field name can refer to a single scalar or string, to a vector of values from a single sensor,
  or to a matrix.  For example, a column in an ASCII data file can be read in 
  as a vector.  An image in a png file can be read in as a matrix.  
  Datasource readers provide functions for reading and obtaining fields and 
  field names.
</para>
</sect3>

<sect3 id="Frames">
<title>Frames</title>
<para>
When reading in a vector from a data source field, data are addressed by their Frame number, not by their sample number.  Each field in a data source has its own fixed number of samples per frame.
</para>
<para>
For some data sources (eg, ASCII files) every frame contains exactly one sample (ie, for ASCII files, a frame is a valid row of data, and every row has exactly one sample for each field).  
</para>
<para>
However, for other data sources (eg, dirfiles), there may be multiple samples per frame.  In the illustration below, the first 3 frames of an imaginary dirfile are shown.  In this particular data file, Field1 has a 1 sample per frame, Field2 has 4 samples per frame, and Field3 has 2 samples per frame.  Every field must have a constant number of samples per frame throughout the file.
</para>
<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Diagram-kst-frames.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>

<para>
  In the figure, imagine that time proceeds from top to bottom.  &kst; assumes that the first sample in a frame is simultaneous for every field in the data source, and that the rest of the samples are sampled evenly throughout the frame.  On the other hand, when plotting one vector agains another, &kst; assumes that the first and last samples of each vector are simultaneous, and interpolates the shorter vector up to the resolution of the longer vector.  Since only the first sample in a frame can be assumed to be simultaneous across fields, when &kst; reads data into a vector, it only reads up to the first sample of the last frame requested, so that plotting one vector against another will make sense.  The rest of the last frame will not be read.  So if the first three frames of Field1 and Field2 are read from the data source in the figure, 3 samples will be read from Field1, and 9 samples will be read from Field2 (ending at first sample of Frame 3) - not 12 as one might expect.
</para>
</sect3>

<sect3 id="supportingadditionalfileformatsdatasourceconceptsindex">
<title>INDEX Field</title>
<para>
As well as the explicit data fields in a data file, &kst; implicitly creates an INDEX field for all data sources.  The INDEX field is 1 sample per frame, and simply contains integers from 0 to N-1, where N is the number of frames in the data file.  It is common to plot vectors against INDEX.  This is convenient since  the INDEX of a sample or event is just the frame number, allowing easy identification and retrieval of events from a data file.
</para>
</sect3>

</sect2>

<sect2 id="creatingascii">
<title>ASCII Input Files</title>
<para>
&kst; is capable of reading vectors from a wide range of ASCII formats.  As long as the data are in columns, and as long as each non-comment row has the same number of collumns, &kst; can probably read it.
</para>
<para>
  Consider reading this simple ASCII csv file:  each comma separated column represents a field. 
</para>

<informalexample>
<screen>
Length,Width
m,m
1.1,6.2
2.4,9.3
4.3,4.7
5.2,8.8
</screen>
</informalexample>


<para>
  When you enter an ascii source into a data source selection widget (such as on the first page of the data wizard) the file will be identified as an ASCII file, and the <guibutton>Configure</guibutton> button will be enabled, as shown below.
</para>


<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-datasource-selector.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>

<para>
  Clicking on <guibutton>Configure</guibutton> will bring up the ASCII data source configuration dialog.
</para>

<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-ascii-config.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>

<para>
  Note that the first few lines of the file are shown.  The dialog in the screen shot has been filled out to read this file: looking at the first lines of the file, we see that data starts at line 3, line 1 holds the field names, and line 2 holds the units (which will be used by &kst; in plot labels).  Additionally, as this is a csv file, a <literal>,</literal> has been selected as the Custom delimiter.  Selecting <guilabel>OK</guilabel> will permanently assign this configuration to this file, until it is changed again in this dialog, or until <guimenuitem>Clear datasource settings</guimenuitem> in the <guimenu>Settings</guimenu> menu is selected.
</para>

<para>
</para>

</sect2>
</sect1>

<sect1 id="datamanager">
<title>The Data Manager</title>
<para>
The Data Manager provides a central location for deleting and modifying all the data objects used in &kst;.
It can be accessed by selecting <guimenuitem>Data Manager</guimenuitem> from the <guimenu>Tools</guimenu> menu or by clicking the  

<inlinemediaobject>
<imageobject>
<imagedata fileref="Icon-kst-datamanager.png" format="PNG"/>
</imageobject>
</inlinemediaobject>

icon in the tool bar.
</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-datamanager.png" format="PNG"/>
</imageobject>
</mediaobject>
</screenshot>

<para>
  The window lists all data object currently loaded in kst, as well as their type and basic properties.  To edit an object, double click on it, or select it and click the <guibutton>Edit</guibutton> button.  It will bring up the appropriate edit dialog.  Items that have child-vectors can be expanded to list them.  Items also have right button context menus with common tasks for the items, such as making curves or power spectra from vectors, or adding curves to plots.
</para>

<para>
  Items can also be deleted from this dialog by selecting them and clicking <guibutton>Delete</guibutton>.  This will delete the selected item and all items which depend on it.  So if you delete a vector, all curves, spectra, historgrams, or equations that depend on it will also be deleted.  Be careful, because this can not be undone.
</para>
<para>
  Clicking the <guibutton>Purge</guibutton> will remove all undisplayed data objects.  If deleting an object (and everthing that depends on it) will not change any plots or labels, then it is deleted.  Nothing that is displayed is deleted.  This can not be undone.
</para>

</sect1>

<sect1 id="datatypes">
<title>Data Types</title>

<para>
  Plots in &kst; are created by building up objects into the displayed curves.  In &kst;, there are 5 major classes: 
</para>
<itemizedlist>
<listitem>
<para>
  Data Sources: these provide Primitives with access to data files.
</para>
</listitem>
<listitem>
<para>
  Primitives: These are basic data types, including Strings, Scalars (which are single numbers), Vectors (which are ordered lists of numbers) and Matrices (which are 2D arrays of numbers).
</para>
</listitem>
<listitem>
<para>
  Relations: these objects describe how vectors or matrices are displayed in a plot.  They include Curves (which display an XY pair of vectors) and Images (which display matrices).
</para>
</listitem>
<listitem>
<para>
  Data Objects: these classes take Primitives as inputs, process them, and output Primitives.  These include Spectra, Histograms, Equations, Fits, Filters, and other Plugins.
</para>
</listitem>
<listitem>
<para>
  View Items: these are objects that can be drawn, and include plots, labels, lines, etc.  Plots can display Relations (curves and images).  Labels can display Scalars and Strings.
</para>
</listitem>
</itemizedlist>

<para>
  As an example of how these various classes work together, consider the example session in the chapter on 
  <link linkend="filters">Filters</link>.  In this session, a curve from a data file was plotted, along with a low pass filtered version of the curve. The resulting data structures are as follows:
</para>


<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Diagram-datatypes-example.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>&kst; Data Types</phrase>
</textobject>
</inlinemediaobject>
</para>

<para>
  The plot displays two curves.  One curve takes two data vectors (INDEX and Column 2) as inputs.  The other takes INDEX as its X vector, and the ouput vector of the Low Pass Filter as its Y vector.  The low pass filter takes the Column 2 vector, and two Scalars as its inputs.  The two data vectors get their data from the Data Source.
</para>

<para>
  The data manager for this sessions is shown below. Note that the literal scalars [4 (X30)] and [0.05 (X29)] are not listed.  To keep things clean, and because '4' is not editable, literal scalars like this are not presented in the UI.
</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-datamanager2.png" format="PNG"/>
</imageobject>
</mediaobject>
</screenshot>

<para>
  This structure could have been chained together further.  For example, the output of the Filter could have been used as the input to a Histogram, and the Histogram of the output of the filtered data could have been plotted instead.
</para>

<para>
Descriptions of each data type are provided below.
</para>

<sect2 id="vectors">
<title>Vectors</title>
<para>
Vectors are ordered lists of numbers.  They are used as the inputs to Data Objects.  They are also used to define the X or Y axis for curves.  While different types of vectors are created in different ways, they can call be used in Data Objects or curves in the same way.
</para>

<para>
  
<itemizedlist>
<listitem>
<para>
  Data Vectors aquire their data from Data Sources (ie, data files).  They can be created from the <guimenuitem>Vector</guimenuitem> option in the <guimenu>Create</guimenu> menu, or by selecting the
  
<inlinemediaobject>
<imageobject>
<imagedata fileref="Icon-kst-vectornew.png" format="PNG"/>
</imageobject>
</inlinemediaobject>

  icon in any vector selector.  
</para>
</listitem>
<listitem>
<para>
  Generated Vectors are lists of equally spaced numbers whose range and spacing is defined in the GUI.  They can be created from the <guimenuitem>Vector</guimenuitem> option in the <guimenu>Create</guimenu> menu, or by selecting the
  
<inlinemediaobject>
<imageobject>
<imagedata fileref="Icon-kst-vectornew.png" format="PNG"/>
</imageobject>
</inlinemediaobject>

  icon in any vector selector.  
</para>
</listitem>
<listitem>
<para>
  Editable Vectors have their data defined through the Python interface.  They can not be created or edited in the GUI.
</para>
</listitem>
<listitem>
<para>
   Output Vectors are the output of data objects, such as histograms or filters.  
</para>
</listitem>
</itemizedlist>
  
</para>

</sect2>

<sect2 id="curves">
<title>Curves</title>
<para>
Curves are used to create plottable objects from vectors.  Curves are created from two vectors - an <quote>X axis vector</quote> and a <quote>Y axis vector</quote>.  These two vectors are interpreted as a set of (X,Y) pairs to be plotted.  When the X and Y vectors have the same length, the interpretation is obvious.  
</para>
<para>
If, however, the X vector is of a different length than the Y vector, then the first and last points of each are assumed to represent the first and last (X,Y) pair, and the shorter vector is resampled using linear interpolation to have the same number of samples as the longer vector.
</para>
<para>
Curves are created by the data wizard, from the creation dialog from Data Objects (such as histograms) or by using the <guimenuitem>Curve</guimenuitem> option in the <guimenu>Create</guimenu> menu.  The latter produces the following:
</para>

<screenshot>
<screeninfo>New Curve</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-newcurve.png" format="PNG" />
</imageobject>
<textobject>
<phrase>New Curve</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
  Here, in the <guilabel>Curve Contents</guilabel> box, the curve has been set up to use INDEX (V1) as the X axis vector and Column 2 (V3) as the Y axis vector.    Note that vectors holding X and Y axis error bars can also be selected.  The 
  
<inlinemediaobject>
<imageobject>
<imagedata fileref="Icon-kst-vectornew.png" format="PNG"/>
</imageobject>
</inlinemediaobject>

  icon in any of the vector selectors will bring up a new vector dialog.  The
  
<inlinemediaobject>
<imageobject>
<imagedata fileref="Icon-kst-vectoredit.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
  icon will edit the selected vector.
</para>

<para>
  The appearance of curves is adjusted in the <guilabel>Appearance</guilabel> box.  Some of the flexability of curves in kst is shown in the next figure. 
  Note that the options are not exclusive - for example, <guilabel>Lines</guilabel> and <guilabel>Points</guilabel> can both be selected.  The <guilabel>Size</guilabel> field specifies the dimensions of display elements such as points and error flags in points (the same way as font sizes are defined.)
  The <guilabel>Weight</guilabel> field specifies the width of lines,
  bar graph borders, and the strokes for points.  The color selector to the right of the example line sets the color of lines, points, and bargraph borders.  The color selector to the right of the <guilabel>Bargraph</guilabel> checkbox sets the fill color for bargraphs.  The last (most recent) point of a
  curve can be indicated by slecting <guilabel>Head</guilabel> and specifying
  a point type and color. The color selector to the right of the <guilabel>Head</guilabel> sets the color for this point.  
</para>

<screenshot>
<screeninfo>Curve Demo</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-curvedemo.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Curve Demo</phrase>
</textobject>
</mediaobject>
</screenshot>


<para>
  The <guilabel>Placement</guilabel> box specifies what plot the curve will be displayed in.  Both the <guilabel>Placement</guilabel> and <guilabel>Appearance</guilabel> boxes appear in data object creation dialogs as well, and work the same way.
</para>

</sect2>

<sect2 id="equations">
<title>Equations</title>
<para>
  Equations are data objects whose outputs are: 
</para>
<itemizedlist>
  <listitem>
    <para>
      A vector (<literal>...:y</literal>) which is the function of one or more data vectors.
    </para>
  </listitem>
  <listitem>
    <para>
      A vector (<literal>...:x</literal>) which passes through the X input vector.  
    </para>
  </listitem>
</itemizedlist>

<para>
  The inputs are: 
</para>
<itemizedlist>
  <listitem>
    <para>
      A vector which is used as the <literal>x</literal> variable in equations.
    </para>
  </listitem>
  <listitem>
    <para>
      Any vectors or scalars specified by name in the equation text.
    </para>
  </listitem>
</itemizedlist>

<para>
  Equations are used to produce vectors which are the point-by-point function of one or more input vectors and scalars.  They are created by selecting <guimenuitem>Equation</guimenuitem> from the <guimenu>Create</guimenu> menu.  An example of creating an equation, and the resulting plot is shown below. In this example, a Generated Vector consisting of 1000 points from -10 to 10 was selected for the x vector.  Recall that a Generated vector can be created by selecting the new vector icon, 

  <inlinemediaobject>
  <imageobject>
  <imagedata fileref="Icon-kst-vectornew.png" format="PNG"/>
  </imageobject>
  </inlinemediaobject>

  which appears to the right of the <guilabel>X Vector</guilabel> field.  The equation, <literal>sin(x)/x</literal>, was entered into the <guilabel>Equation</guilabel> field.  
</para>

<screenshot>
<screeninfo>New Equation</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-newequation.png" format="PNG" />
</imageobject>
<textobject>
<phrase>New Equation</phrase>
</textobject>
</mediaobject>
</screenshot>

<screenshot>
<screeninfo>sin(x)/x</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-sinx_x.png" format="PNG" />
</imageobject>
<textobject>
<phrase>sin(x)/x</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
  Equations support the following operators:
</para>  

<itemizedlist>
  <listitem>
    <para>
      Arithmetic operators: <literal>+</literal>, <literal>-</literal>, <literal>*</literal>, <literal>/</literal>, <literal>%</literal> (modulus operator) and <literal>^</literal> (power operator).  
    </para>
  </listitem>
  <listitem>
    <para>
      Bitwise operators: <literal>&amp;</literal>, <literal>|</literal>.  These operators assume the vector is comprised of integers.
    </para>
  </listitem>
  <listitem>
    <para>
      Logical operators: <literal>!</literal>, <literal>&amp;&amp;</literal>, <literal>||</literal>, <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>==</literal>, <literal>&gt;=</literal>, <literal>&gt;</literal>, and <literal>!=</literal>.  These functions output 1 for True and 0 for False.
    </para>
  </listitem>
</itemizedlist>

<para>
  Functions supported by kst are: 
</para>

<literal>PLUGIN()</literal>
<itemizedlist>
  <listitem>
    <para>
      Trig functions working in Radians:  <literal>SIN()</literal>, <literal>COS()</literal>, <literal>TAN()</literal>, <literal>ASIN()</literal>, <literal>ACOS()</literal>, <literal>ATAN()</literal>, <literal>ATAN2()</literal>, <literal>SEC()</literal>, <literal>CSC()</literal> and <literal>COT()</literal>.
    </para>
  </listitem>
  <listitem>
    <para>
      Trig functions working in Degrees:  <literal>SIND()</literal>, <literal>COSD()</literal>, <literal>TAND()</literal>, <literal>ASIND()</literal>, <literal>ACOSD()</literal>, <literal>ATAND()</literal>, <literal>SECD()</literal>, <literal>CSCD()</literal> and <literal>COTD()</literal>.
    </para>
  </listitem>
  <listitem>
    <para>
      Other functions:  <literal>ABS()</literal>, <literal>SQRT()</literal>, <literal>CBRT()</literal>, <literal>SINH()</literal>, <literal>COSH()</literal>, <literal>TANH()</literal>, <literal>EXP()</literal>, <literal>LN()</literal>, <literal>LOG()</literal> and <literal>STEP()</literal>.  <literal>STEP()</literal> returns 1 if the argument is greater than 0, and 0 otherwise.
    </para>
  </listitem>
</itemizedlist>

<para>
  Equations can use any vector or scalar as their input vectors, not just the X vector.  In the next example, the bottom right plot shows the signal in Column 2 with the signal in Column 1 regressed out of it. This has been done by subtracting Column 1, scaled by the slope of a fit to Column 2 vs Column 1, from Column 2.  The fit had been created previously using the <guimenuitem>Fit</guimenuitem> option in the right mouse button menu of the top right plot.
</para>

<screenshot>
<screeninfo>Regression</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-eq2Plots.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Regression</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
  The <guilabel>New Equation</guilabel> dialog which created this plot is shown below.
  Note that vectors are identified by enclosing their names in <literal>[  ]</literal>.   So Column 2
  is indicated by <literal>[Column 2 (V2)]</literal>.  The <guilabel>Equation</guilabel> line widget
  has a fairly powerful autocomplete mechanism with a scrollable list of all possible scalars (in 
  its first colum) or vectors (in its second column) as you enter the name of the object.  Similarly,
  the auto complete lists all valid functions and operators as relevant while you type.  The
  <literal>Esc</literal> key hides the autocomplete widget.
</para>

<para>
  If the vectors were set to <guilabel>Read to end</guilabel> mode, all elements would be updated real 
  time as new data came in.
</para>

<screenshot>
<screeninfo>Complex Equation</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-eq2.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Complex Equation</phrase>
</textobject>
</mediaobject>
</screenshot>

</sect2>

<sect2 id="Histograms">
<title>Histograms</title>
<para>
Histograms are data objects whose output vectors are the binned data, 
and the locations of the center of the bins.  In the 
<guilabel>New Histogram</guilabel> dialog, the bins can be set manually,
can be preset once by selecting <guilabel>Auto Bin</guilabel> or can be
set to be automatically reset with each data update by selecting
<guilabel>Real-time auto bin</guilabel>.
</para>

<screenshot>
<screeninfo>New Histogram</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-new-histogram.png" format="PNG" />
</imageobject>
<textobject>
<phrase>New Histogram</phrase>
</textobject>
</mediaobject>
</screenshot>

<screenshot>
<screeninfo>Histogram</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-histogram.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Histogram</phrase>
</textobject>
</mediaobject>
</screenshot>

</sect2>

<sect2 id="power-spectra">
<title>Power Spectra</title>
<para>
  Spectra are data objects whose outputs are a vector with the fft-based spectrum of the input
  vector (<literal>...:psd</literal>), and a vector containing the centers of the corresponding
  frequency bins (<literal>...:f</literal>).  
</para>

<para>
  The following plot shows an example spectrum.  The plot has been converted to log-log mode (hit 'l' and 'g' in the plot window to toggle Y and X log axes respectvely).
</para>

<screenshot>
<screeninfo>Spectrum</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-spectrum_log.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Spectrum</phrase>
</textobject>
</mediaobject>
</screenshot>


<para>
  The spectrum dialog (select <guimenuitem>Power Spectrum</guimenuitem> from the <guimenu>Create</guimenu> menu) used to create this plot is shown below:
</para>

<screenshot>
<screeninfo>New Spectrum Dialog</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-new-spectrum.png" format="PNG" />
</imageobject>
<textobject>
<phrase>The New Spectrum Dialog</phrase>
</textobject>
</mediaobject>
</screenshot>  

<para> 
  The dialog entries are as follows:
</para>

<variablelist>
<varlistentry>
<term>
<guilabel>Data vector</guilabel>
</term>
<listitem>
<para>
The data vector to create a power spectrum from.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Remove Mean</guilabel>
</term>
<listitem>
<para>
Remove a constant from the input vector to make it mean zero before calculating the spectrum.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Apodize</guilabel>
</term>
<listitem>
<para>
Apodize the data with the selected function before calculating the power spectrum to reduce
bin to bin leackage.  The default is a Hanning Window.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Interleaved average</guilabel> and <guilabel>FFT Length</guilabel>
</term>
<listitem>
<para>
  When <guilabel>Interleaved average</guilabel> is not set, the spectrum is based on an FFT 
  whose lengh is power of two larger or equal to the length of the unput vector.  The remaining points are zero padded.  For cases like this, apodization and mean removal is quite important.
</para>
<para>
  When <guilabel>Interleaved average</guilabel> is set, the spectrum is based on the average of FFTs of length <literal>2^x</literal> where <literal>x</literal> is specified by the <guilabel>FFT Length</guilabel> entry, interleaved such that no zero padding is required.  Choosing this option reduces the noise of the spectrum, at the cost of reduced resolution.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guibutton>Sample rate</guibutton>
</term>
<listitem>
<para>
The frequency bin output vector (<literal>...:f</literal>) will be calculated assuming the input vector was uniformly sampled at this sample rate.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Data units</guilabel> and <guilabel>Rate units</guilabel>
</term>
<listitem>
<para>
Auto-generating axes labels for plots will be based on these units.
</para>
</listitem>
</varlistentry>


</variablelist>

</sect2>

<sect2 id="plugins">
<title>Plugins</title>
<para>
A plugin data object represents a &kst; plugin.  All plugins have a common format, and show
up as type <quote>Plugin</quote> in the Data Manager.  For more information about plugins,
please see <link linkend="pluginsandfilters">Plugins and Filters</link>
</para>
</sect2>

<sect2 id="events">
<title>Event Monitors</title>
<para>
An event monitor data object represents an instance of an event monitor.  For more information on monitoring of events, see
<link linkend="eventmonitoring">Event Monitoring</link>.
</para>
</sect2>


<sect2 id="arrays">
<title>Matrices</title>
<para>
A matrix represents a set of three-dimensional data points (x, y, z) arranged in a 
two-dimensional grid. The z values of the matrix are obtained from a vector, and the 
grid structure is manually specified using the Edit or New Matrix dialog.  The descriptions
below refer to the following diagram depicting &kst;'s matrix structure.
</para>
<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Diagram-kst-matrix.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>
<para>
A screenshot and explanation of the matrix dialog follow.
</para>
<screenshot>
<screeninfo>Matrix Window</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-matrixwindow.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Matrix Window</phrase>
</textobject>
</mediaobject>
</screenshot>

<sect3 id="arrayvectorselection">
<title>Vector Selection</title>

<variablelist>
<varlistentry>
<term>
<guilabel>Z Vector</guilabel>
</term>
<listitem>
<para>
The data vector to obtain the z values from.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="arraygridparameters">
<title>Grid Parameters</title>

<variablelist>
<varlistentry>
<term>
<guilabel>X Minimum</guilabel> and <guilabel>Y Minimum</guilabel>
</term>
<listitem>
<para>
The origin of the matrix is specified by the coordinates (X Minimum, Y Minimum).
The location of the origin is represented by a red circle in the above diagram.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>X Step Size</guilabel> and <guilabel>Y Step Size</guilabel>
</term>
<listitem>
<para>
These two values specify the dimensions of each rectangular cell in the matrix grid. All cells
in the matrix have identical dimensions.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Dimensions</guilabel> and <guilabel>Use maximum x length</guilabel>
</term>
<listitem>
<para>
Enter the number of steps for the x dimension of the matrix, followed by the number of
steps for the y dimension of the matrix.  If <guilabel>Use maximum x length</guilabel> is
checked, the x dimension of the matrix will be determined based on the length of the vector
and the entered y dimension.  If this option is checked and the length of the vector
subsequently changes, the x dimension of the matrix will be updated accordingly.
</para>
<para>
Note that the minimum allowed y dimension is 1, while the minimum allowed x dimension is 0.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2>

<sect2 id="images">
<title>Images</title>
<para>
Images are graphical representations of <link linkend="arrays">Matrices</link>.  Images can be plotted
as color maps, contour maps, or both.
</para>
<screenshot>
<screeninfo>Image Window</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-imagewindow.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Image Window</phrase>
</textobject>
</mediaobject>
</screenshot>

<sect3 id="imagearrayselection">
<title>Matrix Selection</title>

<variablelist>
<varlistentry>
<term>
<guilabel>Matrix</guilabel>
</term>
<listitem>
<para>
Select the matrix to use for this image.  New matrices can be created by clicking on the button to the right.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="imageimagetype">
<title>Image Type</title>

<variablelist>
<varlistentry>
<term>
<guilabel>Color Map</guilabel>, <guilabel>Contour Map</guilabel>, and <guilabel>Color Map and Contour Map</guilabel>
</term>
<listitem>
<para>
Select the type of image to be plotted. Changing this selection enables or disables sections of the image dialog
as appropriate.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="imagecolormapparameters">
<title>Color Map Parameters</title>
<para>
A color map represents the z value of each cell in the matrix using a color. This section is only available
if <guilabel>Color Map</guilabel> or <guilabel>Color Map and Contour Map</guilabel> is selected under
<guilabel>Image Type</guilabel>.
</para>

<variablelist>
<varlistentry>
<term>
<guilabel>Color palette</guilabel>
</term>
<listitem>
<para>
Select the color palette to use for the color map. By default, two palettes suitable for color maps are installed
by &kst;&mdash;Kst Grayscale 256 (a 256 color grayscale palette) and Kst Spectrum 1021 (a 1021 color rainbow
spectrum that ranges from blue to red). Additional palettes can be installed by simply copying
<productname>GIMP</productname> compatible palette files to the <filename>colors</filename> subdirectory of
the user configuration directory (for example, <filename>/usr/share/config/colors/</filename>).  Note that
saved images using a non-default palette may not be viewable by other users of &kst; if they do not have
the required palette. In such cases, a default grayscale palette is used instead.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Lower Z threshold</guilabel>, <guilabel>Upper Z threshold</guilabel> and <guibutton>Auto Threshold</guibutton>
</term>
<listitem>
<para>
Enter the lower and upper thresholds to use for the mapping of colors.  Palette colors are evenly distributed
between <guilabel>Lower Z threshold</guilabel> and <guilabel>Upper Z threshold</guilabel>.  Any cells in the
selected matrix with z values less than <guilabel>Lower Z threshold</guilabel> are mapped to the first color in the palette.
Any cells in the selected matrix with z values greater than <guilabel>Upper Z threshold</guilabel> are mapped
to the last color in the palette.  Clicking <guibutton>Auto Threshold</guibutton> will fill in the
lower and upper threshold values using the least and greatest z values found in the selected matrix.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="imagecontourmapparameters">
<title>Contour Map Parameters</title>
<para>
A contour map draws a set of lines, with each line representing a certain z value. This section is only available
if <guilabel>Contour Map</guilabel> or <guilabel>Color Map and Contour Map</guilabel> is selected under
<guilabel>Image Type</guilabel>.
</para>

<variablelist>
<varlistentry>
<term>
<guilabel>Number of contour levels</guilabel>
</term>
<listitem>
<para>
Select the number of contour levels to use.  The contour levels will be distributed evenly between the lowest
and highest z values found in the matrix.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guibutton>Color</guibutton>
</term>
<listitem>
<para>
Select the color to use for the contour lines.  Clicking this button displays a standard &kde; color chooser
dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Weight</guilabel> and <guilabel>Use variable line weight</guilabel>
</term>
<listitem>
<para>
Select the weight, or <quote>thickness</quote> of the contour lines.  If <guilabel>Use variable line weight</guilabel>
is selected, contour lines representing higher elevations are drawn thicker than those representing lower elevations.
Use discretion when selecting this option, as images with high contour line densities may become unreadable.
</para>
</listitem>
</varlistentry>

</variablelist>
</sect3>

</sect2>

</sect1>


<sect1 id="thedatamenu">
<title>The Data Menu</title>
<para>
The <guimenu>Data</guimenu> menu provides quick access to many features related to data objects in
&kst;.  Most of the menu functions duplicate functions found elsewhere, so only brief descriptions are
provided below.
</para>
<variablelist>
<varlistentry>
<term><guimenuitem>Reload</guimenuitem></term>
<listitem>
<para>
Reloads all data vectors from their source files.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>Data Wizard...</guimenuitem></term>
<listitem>
<para>
Displays the Data Wizard.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>Data Manager</guimenuitem></term>
<listitem>
<para>
Displays the <link linkend="datamanager">Data Manager</link>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>New</guimenuitem> [data object]</term>
<listitem>
<para>
Displays the corresponding dialog for creating the data object. Refer to
<link linkend="datatypes">Data Types</link> for descriptions of
each dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>View Scalars</guimenuitem></term>
<listitem>
<para>
Displays a dialog from which the values of all the scalars in the current &kst; session
can be viewed. The dialog is updated dynamically if the values change.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>View Vectors</guimenuitem></term>
<listitem>
<para>
Displays a dialog from which the values in all the current vectors can be viewed. Select
a vector to view using the drop-down list. The dialog
is updated dynamically if the values change.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>View Fit Results</guimenuitem></term>
<listitem>
<para>
Displays a dialog which shows all the resulting values from performed fits. Select
a fit result to view using the drop-down list. The dialog
is updated dynamically if the values change.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guimenuitem>Change Data File</guimenuitem></term>
<listitem>
<para>
Displays a dialog for quickly changing data files that vectors are associated with.   Select the vectors
to change, and then browse to a different data file. Click <guibutton>Apply</guibutton> to save the changes.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:0
sgml-indent-data:true
sgml-parent-document:("index.docbook" "book" "chapter")
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
